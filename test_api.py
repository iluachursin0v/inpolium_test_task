#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Blog API
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ API
"""

import asyncio
import aiohttp
import json
from typing import Dict, Any


class BlogAPITester:
    def __init__(self, base_url: str = "http://localhost:8000/api"):
        self.base_url = base_url
        self.session = None

    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    async def make_request(self, method: str, endpoint: str, data: Dict[Any, Any] = None) -> Dict[Any, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å"""
        url = f"{self.base_url}{endpoint}"

        try:
            if method.upper() == "GET":
                async with self.session.get(url) as response:
                    result = await response.json()
            elif method.upper() == "POST":
                async with self.session.post(url, json=data) as response:
                    result = await response.json()
            elif method.upper() == "PUT":
                async with self.session.put(url, json=data) as response:
                    result = await response.json()
            elif method.upper() == "DELETE":
                async with self.session.delete(url) as response:
                    result = await response.json()

            print(f"{method.upper()} {url}")
            print(f"Status: {response.status}")
            print(f"Response: {json.dumps(result, indent=2, ensure_ascii=False)}")
            print("-" * 50)

            return result

        except Exception as e:
            print(f"Error: {e}")
            return {}

    async def test_full_workflow(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å API"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Blog API")
        print("=" * 50)

        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º
        print("üìÇ –°–æ–∑–¥–∞—ë–º —Ç–µ–º—ã...")
        tech_topic = await self.make_request("POST", "/topics", {
            "name": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "description": "–°—Ç–∞—Ç—å–∏ –æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        })

        lifestyle_topic = await self.make_request("POST", "/topics", {
            "name": "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
            "description": "–°—Ç–∞—Ç—å–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö –∏ —Ö–æ–±–±–∏"
        })

        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–º
        print("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º...")
        await self.make_request("GET", "/topics")

        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
        print("üìù –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç—ã...")
        if tech_topic.get("id"):
            post1 = await self.make_request("POST", "/posts", {
                "title": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ FastAPI",
                "content": "FastAPI - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –±—ã—Å—Ç—Ä—ã–π –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API —Å Python 3.7+, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è—Ö —Ç–∏–ø–æ–≤ Python.",
                "topic_id": tech_topic["id"]
            })

            post2 = await self.make_request("POST", "/posts", {
                "title": "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Python",
                "content": "Asyncio –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–∏—Å–∞—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ async/await.",
                "topic_id": tech_topic["id"]
            })

        if lifestyle_topic.get("id"):
            post3 = await self.make_request("POST", "/posts", {
                "title": "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —É–¥–∞–ª—ë–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ",
                "content": "–°–æ–≤–µ—Ç—ã –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –∏–∑ –¥–æ–º–∞.",
                "topic_id": lifestyle_topic["id"]
            })

        # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤
        print("üìÑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤...")
        await self.make_request("GET", "/posts?page=1&size=10")

        # 5. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –ø–æ —Ç–µ–º–µ
        if tech_topic.get("id"):
            print("üîç –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ —Ç–µ–º–µ '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'...")
            await self.make_request("GET", f"/posts?topic_id={tech_topic['id']}")

        # 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        if post1.get("id"):
            print("üìñ –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç...")
            await self.make_request("GET", f"/posts/{post1['id']}")

        # 7. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        print("üí¨ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...")
        if post1.get("id"):
            comment1 = await self.make_request("POST", f"/posts/{post1['id']}/comments", {
                "content": "–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç—å—è! –û—á–µ–Ω—å –ø–æ–º–æ–≥–ª–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å FastAPI.",
                "author": "–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤"
            })

            await self.make_request("POST", f"/posts/{post1['id']}/comments", {
                "content": "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è. –ñ–¥—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!",
                "author": "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞"
            })

        # 8. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É
        if post1.get("id"):
            print("üìù –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É...")
            await self.make_request("GET", f"/posts/{post1['id']}/comments")

        # 9. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
        if post1.get("id"):
            print("‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç...")
            await self.make_request("PUT", f"/posts/{post1['id']}", {
                "title": "–ü–æ–ª–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ FastAPI",
                "content": "FastAPI - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –±—ã—Å—Ç—Ä—ã–π –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API —Å Python 3.7+. –í —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ –º—ã –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞."
            })

        # 10. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if comment1.get("id"):
            print("‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...")
            await self.make_request("PUT", f"/comments/{comment1['id']}", {
                "content": "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Å—Ç–∞—Ç—å—è! –û—á–µ–Ω—å –ø–æ–º–æ–≥–ª–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å FastAPI. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º –Ω–∞—á–∏–Ω–∞—é—â–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º!",
                "author": "–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤"
            })

        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    async with BlogAPITester() as tester:
        await tester.test_full_workflow()


if __name__ == "__main__":
    print("Blog API Tester")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    print()

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")